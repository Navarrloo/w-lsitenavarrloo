import telebot
from telebot import types
from datetime import datetime

# –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = 'YOUR_BOT_TOKEN'
bot = telebot.TeleBot(BOT_TOKEN)

# –ü—Ä–∏–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–µ–∞–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö)
user_database = {}
scammers_database = {}
guarantors = []
volunteers = []

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "‚ù§Ô∏è –°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å–∫–∞–º!\n\n"
                          "üê≥ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ - –Ω–∞–ø–∏—à–∏—Ç–µ:\n"
                          "—á–µ–∫ @username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n"
                          "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∫–∞–º–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /—Å–∫–∞–º <ID> <–ø—Ä–∏—á–∏–Ω–∞> - <—Å—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞>")

# –ö–æ–º–∞–Ω–¥–∞ /check –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(func=lambda message: message.text.startswith("—á–µ–∫ "))
def check_command(message):
    user_input = message.text[4:].strip()
    if user_input.startswith("@"):
        user_id = user_input[1:]  # –£–±–∏—Ä–∞–µ–º @
    else:
        user_id = user_input

    if user_id in scammers_database:
        user = scammers_database[user_id]
        response = f"""
üë§ {user['name']}
üíô –†–µ–ø—É—Ç–∞—Ü–∏—è: {user['reputation']}
‚ùì –®–∞–Ω—Å —Å–∫–∞–º–∞: {user['scam_chance']}
üìö –û–ø–∏—Å–∞–Ω–∏–µ: {user['description']}
"""
    else:
        response = f"""
‚ùì –ß–µ–ª–æ–≤–µ–∫–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ! –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–∫–∞–º–∞: 42%
"""
    bot.reply_to(message, response)

# –ö–æ–º–∞–Ω–¥–∞ /—Å–∫–∞–º –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∫–∞–º–µ—Ä–æ–≤
@bot.message_handler(commands=['—Å–∫–∞–º'])
def add_scammer_step_1(message):
    try:
        args = message.text.split(maxsplit=2)
        if len(args) < 3:
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/—Å–∫–∞–º <ID> <–ø—Ä–∏—á–∏–Ω–∞> - <—Å—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞>")
            return
        
        user_id, reason_and_proof = args[1], args[2]
        reason, proof = reason_and_proof.split(' - ', 1)
        
        scammers_database[user_id] = {"reason": reason, "proof": proof}
        
        # –ó–∞–ø—Ä–æ—Å —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add("–ü–ª–æ—Ö–∞—è –†–µ–ø—É—Ç–∞—Ü–∏—è ‚ö†", "–í–æ–∑–º–æ–∂–Ω–æ –°–∫–∞–º–µ—Ä ‚ö†", "–°–ö–ê–ú–ú–ï–† ‚ö†", "–ü–µ—Ç—É—Ö üêî")
        bot.reply_to(message, "ü§î –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–ø—É—Ç–∞—Ü–∏—é", reply_markup=markup)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
@bot.message_handler(func=lambda message: message.text in ["–ü–ª–æ—Ö–∞—è –†–µ–ø—É—Ç–∞—Ü–∏—è ‚ö†", "–í–æ–∑–º–æ–∂–Ω–æ –°–∫–∞–º–µ—Ä ‚ö†", "–°–ö–ê–ú–ú–ï–† ‚ö†", "–ü–µ—Ç—É—Ö üêî"])
def add_scammer_step_2(message):
    try:
        user_id = list(scammers_database.keys())[-1]  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        scammers_database[user_id]["reputation"] = message.text
        scammers_database[user_id]["name"] = f"User {user_id}"
        scammers_database[user_id]["scam_chance"] = "99%"
        scammers_database[user_id]["description"] = scammers_database[user_id]["reason"] + " - " + scammers_database[user_id]["proof"]
        
        scammer = scammers_database[user_id]
        bot.reply_to(
            message,
            f"""
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É:
üíô –†–µ–ø—É—Ç–∞—Ü–∏—è: {scammer['reputation']}
‚ùì –ü—Ä–∏—á–∏–Ω–∞: {scammer['reason']}
üìö –î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: {scammer['proof']}
"""
        )
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–∞—Ä–∞–Ω—Ç–æ–≤
@bot.message_handler(commands=['add_guarantor'])
def add_guarantor(message):
    try:
        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/add_guarantor <@username>")
            return

        username = args[1]
        guarantors.append(username)
        bot.reply_to(message, f"‚úÖ –ì–∞—Ä–∞–Ω—Ç {username} –¥–æ–±–∞–≤–ª–µ–Ω!")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤
@bot.message_handler(commands=['add_volunteer'])
def add_volunteer(message):
    try:
        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/add_volunteer <@username>")
            return

        username = args[1]
        volunteers.append(username)
        bot.reply_to(message, f"‚úÖ –í–æ–ª–æ–Ω—Ç—ë—Ä {username} –¥–æ–±–∞–≤–ª–µ–Ω!")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥–∞—Ä–∞–Ω—Ç–æ–≤
@bot.message_handler(commands=['list_guarantors'])
def list_guarantors(message):
    if guarantors:
        response = "üõ° –°–ø–∏—Å–æ–∫ –≥–∞—Ä–∞–Ω—Ç–æ–≤:\n" + "\n".join(guarantors)
    else:
        response = "üõ° –°–ø–∏—Å–æ–∫ –≥–∞—Ä–∞–Ω—Ç–æ–≤ –ø—É—Å—Ç."
    bot.reply_to(message, response)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤
@bot.message_handler(commands=['list_volunteers'])
def list_volunteers(message):
    if volunteers:
        response = "üå¥ –°–ø–∏—Å–æ–∫ –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤:\n" + "\n".join(volunteers)
    else:
        response = "üå¥ –°–ø–∏—Å–æ–∫ –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤ –ø—É—Å—Ç."
    bot.reply_to(message, response)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.infinity_polling()
